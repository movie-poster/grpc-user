// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserCrud_Insert_FullMethodName         = "/api.v1.UserCrud/Insert"
	UserCrud_Update_FullMethodName         = "/api.v1.UserCrud/Update"
	UserCrud_Delete_FullMethodName         = "/api.v1.UserCrud/Delete"
	UserCrud_Login_FullMethodName          = "/api.v1.UserCrud/Login"
	UserCrud_ResetPassword_FullMethodName  = "/api.v1.UserCrud/ResetPassword"
	UserCrud_CheckToken_FullMethodName     = "/api.v1.UserCrud/CheckToken"
	UserCrud_ChangePassword_FullMethodName = "/api.v1.UserCrud/ChangePassword"
)

// UserCrudClient is the client API for UserCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCrudClient interface {
	Insert(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error)
	Delete(ctx context.Context, in *RequestByIdUser, opts ...grpc.CallOption) (*ResponseUser, error)
	Login(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*User, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResponseUser, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*ResponseUser, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ResponseUser, error)
}

type userCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCrudClient(cc grpc.ClientConnInterface) UserCrudClient {
	return &userCrudClient{cc}
}

func (c *userCrudClient) Insert(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, UserCrud_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, UserCrud_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) Delete(ctx context.Context, in *RequestByIdUser, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, UserCrud_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) Login(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserCrud_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, UserCrud_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, UserCrud_CheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, UserCrud_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCrudServer is the server API for UserCrud service.
// All implementations must embed UnimplementedUserCrudServer
// for forward compatibility
type UserCrudServer interface {
	Insert(context.Context, *User) (*ResponseUser, error)
	Update(context.Context, *User) (*ResponseUser, error)
	Delete(context.Context, *RequestByIdUser) (*ResponseUser, error)
	Login(context.Context, *LoginUser) (*User, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResponseUser, error)
	CheckToken(context.Context, *CheckTokenRequest) (*ResponseUser, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ResponseUser, error)
	mustEmbedUnimplementedUserCrudServer()
}

// UnimplementedUserCrudServer must be embedded to have forward compatible implementations.
type UnimplementedUserCrudServer struct {
}

func (UnimplementedUserCrudServer) Insert(context.Context, *User) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedUserCrudServer) Update(context.Context, *User) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserCrudServer) Delete(context.Context, *RequestByIdUser) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserCrudServer) Login(context.Context, *LoginUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserCrudServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserCrudServer) CheckToken(context.Context, *CheckTokenRequest) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedUserCrudServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserCrudServer) mustEmbedUnimplementedUserCrudServer() {}

// UnsafeUserCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCrudServer will
// result in compilation errors.
type UnsafeUserCrudServer interface {
	mustEmbedUnimplementedUserCrudServer()
}

func RegisterUserCrudServer(s grpc.ServiceRegistrar, srv UserCrudServer) {
	s.RegisterService(&UserCrud_ServiceDesc, srv)
}

func _UserCrud_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCrud_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Insert(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCrud_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIdUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCrud_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Delete(ctx, req.(*RequestByIdUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCrud_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Login(ctx, req.(*LoginUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCrud_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCrud_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCrud_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCrud_ServiceDesc is the grpc.ServiceDesc for UserCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.UserCrud",
	HandlerType: (*UserCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _UserCrud_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserCrud_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserCrud_Delete_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserCrud_Login_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserCrud_ResetPassword_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _UserCrud_CheckToken_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserCrud_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
